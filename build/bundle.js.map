{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/elizabot/elizadata.js","../../node_modules/elizabot/elizabot.js","../../src/Elizabet.svelte","../../src/Cat.svelte","../../src/Browser.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape_attribute_value(value.toString())}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.47.0' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    if (tag && typeof tag !== 'string') {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","// start of file - elizadata.js\n// data for elizabot.js\n// entries prestructured as layed out in Weizenbaum's description\n// [cf: Communications of the ACM, Vol. 9, #1 (January 1966): p 36-45.]\n\n\"use strict\";\n\nexports.elizaInitials = [\n\t\"How do you do.  Please tell me your problem.\",\n// additions (not original)\n\t\"Please tell me what's been bothering you.\",\n\t\"Is something troubling you ?\"\n];\n\nexports.elizaFinals = [\n\t\"Goodbye.  It was nice talking to you.\",\n// additions (not original)\n\t\"Goodbye.  This was really a nice talk.\",\n\t\"Goodbye.  I'm looking forward to our next session.\",\n\t\"This was a good session, wasn't it -- but time is over now.   Goodbye.\",\n\t\"Maybe we could discuss this moreover in our next session ?   Goodbye.\"\n];\n\nexports.elizaQuits = [\n\t\"bye\",\n\t\"goodbye\",\n\t\"done\",\n\t\"exit\",\n\t\"quit\"\n];\n\nexports.elizaPres = [\n\t\"dont\", \"don't\",\n\t\"cant\", \"can't\",\n\t\"wont\", \"won't\",\n\t\"recollect\", \"remember\",\n\t\"recall\", \"remember\",\n\t\"dreamt\", \"dreamed\",\n\t\"dreams\", \"dream\",\n\t\"maybe\", \"perhaps\",\n\t\"certainly\", \"yes\",\n\t\"machine\", \"computer\",\n\t\"machines\", \"computer\",\n\t\"computers\", \"computer\",\n\t\"were\", \"was\",\n\t\"you're\", \"you are\",\n\t\"i'm\", \"i am\",\n\t\"same\", \"alike\",\n\t\"identical\", \"alike\",\n\t\"equivalent\", \"alike\"\n];\n\nexports.elizaPosts = [\n\t\"am\", \"are\",\n\t\"your\", \"my\",\n\t\"me\", \"you\",\n\t\"myself\", \"yourself\",\n\t\"yourself\", \"myself\",\n\t\"i\", \"you\",\n\t\"you\", \"I\",\n\t\"my\", \"your\",\n\t\"i'm\", \"you are\"\n];\n\nexports.elizaSynons = {\n\t\"be\": [\"am\", \"is\", \"are\", \"was\"],\n\t\"belief\": [\"feel\", \"think\", \"believe\", \"wish\"],\n\t\"cannot\": [\"can't\"],\n\t\"desire\": [\"want\", \"need\"],\n\t\"everyone\": [\"everybody\", \"nobody\", \"noone\"],\n\t\"family\": [\"mother\", \"mom\", \"father\", \"dad\", \"sister\", \"brother\", \"wife\", \"children\", \"child\"],\n\t\"happy\": [\"elated\", \"glad\", \"better\"],\n\t\"sad\": [\"unhappy\", \"depressed\", \"sick\"]\n};\n\nexports.elizaKeywords = [\n\n\t/*\n\t Array of\n\t [\"<key>\", <rank>, [\n\t [\"<decomp>\", [\n\t \"<reasmb>\",\n\t \"<reasmb>\",\n\t \"<reasmb>\"\n\t ]],\n\t [\"<decomp>\", [\n\t \"<reasmb>\",\n\t \"<reasmb>\",\n\t \"<reasmb>\"\n\t ]]\n\t ]]\n\t */\n\n\t[\"xnone\", 0, [\n\t\t[\"*\", [\n\t\t\t\"I'm not sure I understand you fully.\",\n\t\t\t\"Please go on.\",\n\t\t\t\"What does that suggest to you ?\",\n\t\t\t\"Do you feel strongly about discussing such things ?\",\n\t\t\t\"That is interesting.  Please continue.\",\n\t\t\t\"Tell me more about that.\",\n\t\t\t\"Does talking about this bother you ?\"\n\t\t]]\n\t]],\n\t[\"sorry\", 0, [\n\t\t[\"*\", [\n\t\t\t\"Please don't apologise.\",\n\t\t\t\"Apologies are not necessary.\",\n\t\t\t\"I've told you that apologies are not required.\",\n\t\t\t\"It did not bother me.  Please continue.\"\n\t\t]]\n\t]],\n\t[\"apologise\", 0, [\n\t\t[\"*\", [\n\t\t\t\"goto sorry\"\n\t\t]]\n\t]],\n\t[\"remember\", 5, [\n\t\t[\"* i remember *\", [\n\t\t\t\"Do you often think of (2) ?\",\n\t\t\t\"Does thinking of (2) bring anything else to mind ?\",\n\t\t\t\"What else do you recollect ?\",\n\t\t\t\"Why do you remember (2) just now ?\",\n\t\t\t\"What in the present situation reminds you of (2) ?\",\n\t\t\t\"What is the connection between me and (2) ?\",\n\t\t\t\"What else does (2) remind you of ?\"\n\t\t]],\n\t\t[\"* do you remember *\", [\n\t\t\t\"Did you think I would forget (2) ?\",\n\t\t\t\"Why do you think I should recall (2) now ?\",\n\t\t\t\"What about (2) ?\",\n\t\t\t\"goto what\",\n\t\t\t\"You mentioned (2) ?\"\n\t\t]],\n\t\t[\"* you remember *\", [\n\t\t\t\"How could I forget (2) ?\",\n\t\t\t\"What about (2) should I remember ?\",\n\t\t\t\"goto you\"\n\t\t]]\n\t]],\n\t[\"forget\", 5, [\n\t\t[\"* i forget *\", [\n\t\t\t\"Can you think of why you might forget (2) ?\",\n\t\t\t\"Why can't you remember (2) ?\",\n\t\t\t\"How often do you think of (2) ?\",\n\t\t\t\"Does it bother you to forget that ?\",\n\t\t\t\"Could it be a mental block ?\",\n\t\t\t\"Are you generally forgetful ?\",\n\t\t\t\"Do you think you are suppressing (2) ?\"\n\t\t]],\n\t\t[\"* did you forget *\", [\n\t\t\t\"Why do you ask ?\",\n\t\t\t\"Are you sure you told me ?\",\n\t\t\t\"Would it bother you if I forgot (2) ?\",\n\t\t\t\"Why should I recall (2) just now ?\",\n\t\t\t\"goto what\",\n\t\t\t\"Tell me more about (2).\"\n\t\t]]\n\t]],\n\t[\"if\", 3, [\n\t\t[\"* if *\", [\n\t\t\t\"Do you think it's likely that (2) ?\",\n\t\t\t\"Do you wish that (2) ?\",\n\t\t\t\"What do you know about (2) ?\",\n\t\t\t\"Really, if (2) ?\",\n\t\t\t\"What would you do if (2) ?\",\n\t\t\t\"But what are the chances that (2) ?\",\n\t\t\t\"What does this speculation lead to ?\"\n\t\t]]\n\t]],\n\t[\"dreamed\", 4, [\n\t\t[\"* i dreamed *\", [\n\t\t\t\"Really, (2) ?\",\n\t\t\t\"Have you ever fantasized (2) while you were awake ?\",\n\t\t\t\"Have you ever dreamed (2) before ?\",\n\t\t\t\"goto dream\"\n\t\t]]\n\t]],\n\t[\"dream\", 3, [\n\t\t[\"*\", [\n\t\t\t\"What does that dream suggest to you ?\",\n\t\t\t\"Do you dream often ?\",\n\t\t\t\"What persons appear in your dreams ?\",\n\t\t\t\"Do you believe that dreams have something to do with your problem ?\"\n\t\t]]\n\t]],\n\t[\"perhaps\", 0, [\n\t\t[\"*\", [\n\t\t\t\"You don't seem quite certain.\",\n\t\t\t\"Why the uncertain tone ?\",\n\t\t\t\"Can't you be more positive ?\",\n\t\t\t\"You aren't sure ?\",\n\t\t\t\"Don't you know ?\",\n\t\t\t\"How likely, would you estimate ?\"\n\t\t]]\n\t]],\n\t[\"name\", 15, [\n\t\t[\"*\", [\n\t\t\t\"I am not interested in names.\",\n\t\t\t\"I've told you before, I don't care about names -- please continue.\"\n\t\t]]\n\t]],\n\t[\"deutsch\", 0, [\n\t\t[\"*\", [\n\t\t\t\"goto xforeign\",\n\t\t\t\"I told you before, I don't understand German.\"\n\t\t]]\n\t]],\n\t[\"francais\", 0, [\n\t\t[\"*\", [\n\t\t\t\"goto xforeign\",\n\t\t\t\"I told you before, I don't understand French.\"\n\t\t]]\n\t]],\n\t[\"italiano\", 0, [\n\t\t[\"*\", [\n\t\t\t\"goto xforeign\",\n\t\t\t\"I told you before, I don't understand Italian.\"\n\t\t]]\n\t]],\n\t[\"espanol\", 0, [\n\t\t[\"*\", [\n\t\t\t\"goto xforeign\",\n\t\t\t\"I told you before, I don't understand Spanish.\"\n\t\t]]\n\t]],\n\t[\"xforeign\", 0, [\n\t\t[\"*\", [\n\t\t\t\"I speak only English.\"\n\t\t]]\n\t]],\n\t[\"hello\", 0, [\n\t\t[\"*\", [\n\t\t\t\"How do you do.  Please state your problem.\",\n\t\t\t\"Hi.  What seems to be your problem ?\"\n\t\t]]\n\t]],\n\t[\"computer\", 50, [\n\t\t[\"*\", [\n\t\t\t\"Do computers worry you ?\",\n\t\t\t\"Why do you mention computers ?\",\n\t\t\t\"What do you think machines have to do with your problem ?\",\n\t\t\t\"Don't you think computers can help people ?\",\n\t\t\t\"What about machines worries you ?\",\n\t\t\t\"What do you think about machines ?\",\n\t\t\t\"You don't think I am a computer program, do you ?\"\n\t\t]]\n\t]],\n\t[\"am\", 0, [\n\t\t[\"* am i *\", [\n\t\t\t\"Do you believe you are (2) ?\",\n\t\t\t\"Would you want to be (2) ?\",\n\t\t\t\"Do you wish I would tell you you are (2) ?\",\n\t\t\t\"What would it mean if you were (2) ?\",\n\t\t\t\"goto what\"\n\t\t]],\n\t\t[\"* i am *\", [\n\t\t\t\"goto i\"\n\t\t]],\n\t\t[\"*\", [\n\t\t\t\"Why do you say 'am' ?\",\n\t\t\t\"I don't understand that.\"\n\t\t]]\n\t]],\n\t[\"are\", 0, [\n\t\t[\"* are you *\", [\n\t\t\t\"Why are you interested in whether I am (2) or not ?\",\n\t\t\t\"Would you prefer if I weren't (2) ?\",\n\t\t\t\"Perhaps I am (2) in your fantasies.\",\n\t\t\t\"Do you sometimes think I am (2) ?\",\n\t\t\t\"goto what\",\n\t\t\t\"Would it matter to you ?\",\n\t\t\t\"What if I were (2) ?\"\n\t\t]],\n\t\t[\"* you are *\", [\n\t\t\t\"goto you\"\n\t\t]],\n\t\t[\"* are *\", [\n\t\t\t\"Did you think they might not be (2) ?\",\n\t\t\t\"Would you like it if they were not (2) ?\",\n\t\t\t\"What if they were not (2) ?\",\n\t\t\t\"Are they always (2) ?\",\n\t\t\t\"Possibly they are (2).\",\n\t\t\t\"Are you positive they are (2) ?\"\n\t\t]]\n\t]],\n\t[\"your\", 0, [\n\t\t[\"* your *\", [\n\t\t\t\"Why are you concerned over my (2) ?\",\n\t\t\t\"What about your own (2) ?\",\n\t\t\t\"Are you worried about someone else's (2) ?\",\n\t\t\t\"Really, my (2) ?\",\n\t\t\t\"What makes you think of my (2) ?\",\n\t\t\t\"Do you want my (2) ?\"\n\t\t]]\n\t]],\n\t[\"was\", 2, [\n\t\t[\"* was i *\", [\n\t\t\t\"What if you were (2) ?\",\n\t\t\t\"Do you think you were (2) ?\",\n\t\t\t\"Were you (2) ?\",\n\t\t\t\"What would it mean if you were (2) ?\",\n\t\t\t\"What does ' (2) ' suggest to you ?\",\n\t\t\t\"goto what\"\n\t\t]],\n\t\t[\"* i was *\", [\n\t\t\t\"Were you really ?\",\n\t\t\t\"Why do you tell me you were (2) now ?\",\n\t\t\t\"Perhaps I already know you were (2).\"\n\t\t]],\n\t\t[\"* was you *\", [\n\t\t\t\"Would you like to believe I was (2) ?\",\n\t\t\t\"What suggests that I was (2) ?\",\n\t\t\t\"What do you think ?\",\n\t\t\t\"Perhaps I was (2).\",\n\t\t\t\"What if I had been (2) ?\"\n\t\t]]\n\t]],\n\t[\"i\", 0, [\n\t\t[\"* i @desire *\", [\n\t\t\t\"What would it mean to you if you got (3) ?\",\n\t\t\t\"Why do you want (3) ?\",\n\t\t\t\"Suppose you got (3) soon.\",\n\t\t\t\"What if you never got (3) ?\",\n\t\t\t\"What would getting (3) mean to you ?\",\n\t\t\t\"What does wanting (3) have to do with this discussion ?\"\n\t\t]],\n\t\t[\"* i am* @sad *\", [\n\t\t\t\"I am sorry to hear that you are (3).\",\n\t\t\t\"Do you think coming here will help you not to be (3) ?\",\n\t\t\t\"I'm sure it's not pleasant to be (3).\",\n\t\t\t\"Can you explain what made you (3) ?\"\n\t\t]],\n\t\t[\"* i am* @happy *\", [\n\t\t\t\"How have I helped you to be (3) ?\",\n\t\t\t\"Has your treatment made you (3) ?\",\n\t\t\t\"What makes you (3) just now ?\",\n\t\t\t\"Can you explain why you are suddenly (3) ?\"\n\t\t]],\n\t\t[\"* i was *\", [\n\t\t\t\"goto was\"\n\t\t]],\n\t\t[\"* i @belief i *\", [\n\t\t\t\"Do you really think so ?\",\n\t\t\t\"But you are not sure you (3).\",\n\t\t\t\"Do you really doubt you (3) ?\"\n\t\t]],\n\t\t[\"* i* @belief *you *\", [\n\t\t\t\"goto you\"\n\t\t]],\n\t\t[\"* i am *\", [\n\t\t\t\"Is it because you are (2) that you came to me ?\",\n\t\t\t\"How long have you been (2) ?\",\n\t\t\t\"Do you believe it is normal to be (2) ?\",\n\t\t\t\"Do you enjoy being (2) ?\",\n\t\t\t\"Do you know anyone else who is (2) ?\"\n\t\t]],\n\t\t[\"* i @cannot *\", [\n\t\t\t\"How do you know that you can't (3) ?\",\n\t\t\t\"Have you tried ?\",\n\t\t\t\"Perhaps you could (3) now.\",\n\t\t\t\"Do you really want to be able to (3) ?\",\n\t\t\t\"What if you could (3) ?\"\n\t\t]],\n\t\t[\"* i don't *\", [\n\t\t\t\"Don't you really (2) ?\",\n\t\t\t\"Why don't you (2) ?\",\n\t\t\t\"Do you wish to be able to (2) ?\",\n\t\t\t\"Does that trouble you ?\"\n\t\t]],\n\t\t[\"* i feel *\", [\n\t\t\t\"Tell me more about such feelings.\",\n\t\t\t\"Do you often feel (2) ?\",\n\t\t\t\"Do you enjoy feeling (2) ?\",\n\t\t\t\"Of what does feeling (2) remind you ?\"\n\t\t]],\n\t\t[\"* i * you *\", [\n\t\t\t\"Perhaps in your fantasies we (2) each other.\",\n\t\t\t\"Do you wish to (2) me ?\",\n\t\t\t\"You seem to need to (2) me.\",\n\t\t\t\"Do you (2) anyone else ?\"\n\t\t]],\n\t\t[\"*\", [\n\t\t\t\"You say (1) ?\",\n\t\t\t\"Can you elaborate on that ?\",\n\t\t\t\"Do you say (1) for some special reason ?\",\n\t\t\t\"That's quite interesting.\"\n\t\t]]\n\t]],\n\t[\"you\", 0, [\n\t\t[\"* you remind me of *\", [\n\t\t\t\"goto alike\"\n\t\t]],\n\t\t[\"* you are *\", [\n\t\t\t\"What makes you think I am (2) ?\",\n\t\t\t\"Does it please you to believe I am (2) ?\",\n\t\t\t\"Do you sometimes wish you were (2) ?\",\n\t\t\t\"Perhaps you would like to be (2).\"\n\t\t]],\n\t\t[\"* you* me *\", [\n\t\t\t\"Why do you think I (2) you ?\",\n\t\t\t\"You like to think I (2) you -- don't you ?\",\n\t\t\t\"What makes you think I (2) you ?\",\n\t\t\t\"Really, I (2) you ?\",\n\t\t\t\"Do you wish to believe I (2) you ?\",\n\t\t\t\"Suppose I did (2) you -- what would that mean ?\",\n\t\t\t\"Does someone else believe I (2) you ?\"\n\t\t]],\n\t\t[\"* you *\", [\n\t\t\t\"We were discussing you -- not me.\",\n\t\t\t\"Oh, I (2) ?\",\n\t\t\t\"You're not really talking about me -- are you ?\",\n\t\t\t\"What are your feelings now ?\"\n\t\t]]\n\t]],\n\t[\"yes\", 0, [\n\t\t[\"*\", [\n\t\t\t\"You seem to be quite positive.\",\n\t\t\t\"You are sure.\",\n\t\t\t\"I see.\",\n\t\t\t\"I understand.\"\n\t\t]]\n\t]],\n\t[\"no\", 0, [\n\t\t[\"* no one *\", [\n\t\t\t\"Are you sure, no one (2) ?\",\n\t\t\t\"Surely someone (2) .\",\n\t\t\t\"Can you think of anyone at all ?\",\n\t\t\t\"Are you thinking of a very special person ?\",\n\t\t\t\"Who, may I ask ?\",\n\t\t\t\"You have a particular person in mind, don't you ?\",\n\t\t\t\"Who do you think you are talking about ?\"\n\t\t]],\n\t\t[\"*\", [\n\t\t\t\"Are you saying no just to be negative?\",\n\t\t\t\"You are being a bit negative.\",\n\t\t\t\"Why not ?\",\n\t\t\t\"Why 'no' ?\"\n\t\t]]\n\t]],\n\t[\"my\", 2, [\n\t\t[\"$ * my *\", [\n\t\t\t\"Does that have anything to do with the fact that your (2) ?\",\n\t\t\t\"Lets discuss further why your (2).\",\n\t\t\t\"Earlier you said your (2).\",\n\t\t\t\"But your (2).\"\n\t\t]],\n\t\t[\"* my* @family *\", [\n\t\t\t\"Tell me more about your family.\",\n\t\t\t\"Who else in your family (4) ?\",\n\t\t\t\"Your (3) ?\",\n\t\t\t\"What else comes to your mind when you think of your (3) ?\"\n\t\t]],\n\t\t[\"* my *\", [\n\t\t\t\"Your (2) ?\",\n\t\t\t\"Why do you say your (2) ?\",\n\t\t\t\"Does that suggest anything else which belongs to you ?\",\n\t\t\t\"Is it important to you that your (2) ?\"\n\t\t]]\n\t]],\n\t[\"can\", 0, [\n\t\t[\"* can you *\", [\n\t\t\t\"You believe I can (2) don't you ?\",\n\t\t\t\"goto what\",\n\t\t\t\"You want me to be able to (2).\",\n\t\t\t\"Perhaps you would like to be able to (2) yourself.\"\n\t\t]],\n\t\t[\"* can i *\", [\n\t\t\t\"Whether or not you can (2) depends on you more than on me.\",\n\t\t\t\"Do you want to be able to (2) ?\",\n\t\t\t\"Perhaps you don't want to (2).\",\n\t\t\t\"goto what\"\n\t\t]]\n\t]],\n\t[\"what\", 0, [\n\t\t[\"*\", [\n\t\t\t\"Why do you ask ?\",\n\t\t\t\"Does that question interest you ?\",\n\t\t\t\"What is it you really want to know ?\",\n\t\t\t\"Are such questions much on your mind ?\",\n\t\t\t\"What answer would please you most ?\",\n\t\t\t\"What do you think ?\",\n\t\t\t\"What comes to mind when you ask that ?\",\n\t\t\t\"Have you asked such questions before ?\",\n\t\t\t\"Have you asked anyone else ?\"\n\t\t]]\n\t]],\n\t[\"who\", 0, [\n\t\t[\"who *\", [\n\t\t\t\"goto what\"\n\t\t]]\n\t]],\n\t[\"when\", 0, [\n\t\t[\"when *\", [\n\t\t\t\"goto what\"\n\t\t]]\n\t]],\n\t[\"where\", 0, [\n\t\t[\"where *\", [\n\t\t\t\"goto what\"\n\t\t]]\n\t]],\n\t[\"how\", 0, [\n\t\t[\"how *\", [\n\t\t\t\"goto what\"\n\t\t]]\n\t]],\n\t[\"because\", 0, [\n\t\t[\"*\", [\n\t\t\t\"Is that the real reason ?\",\n\t\t\t\"Don't any other reasons come to mind ?\",\n\t\t\t\"Does that reason seem to explain anything else ?\",\n\t\t\t\"What other reasons might there be ?\"\n\t\t]]\n\t]],\n\t[\"why\", 0, [\n\t\t[\"* why don't you *\", [\n\t\t\t\"Do you believe I don't (2) ?\",\n\t\t\t\"Perhaps I will (2) in good time.\",\n\t\t\t\"Should you (2) yourself ?\",\n\t\t\t\"You want me to (2) ?\",\n\t\t\t\"goto what\"\n\t\t]],\n\t\t[\"* why can't i *\", [\n\t\t\t\"Do you think you should be able to (2) ?\",\n\t\t\t\"Do you want to be able to (2) ?\",\n\t\t\t\"Do you believe this will help you to (2) ?\",\n\t\t\t\"Have you any idea why you can't (2) ?\",\n\t\t\t\"goto what\"\n\t\t]],\n\t\t[\"*\", [\n\t\t\t\"goto what\"\n\t\t]]\n\t]],\n\t[\"everyone\", 2, [\n\t\t[\"* @everyone *\", [\n\t\t\t\"Really, (2) ?\",\n\t\t\t\"Surely not (2).\",\n\t\t\t\"Can you think of anyone in particular ?\",\n\t\t\t\"Who, for example?\",\n\t\t\t\"Are you thinking of a very special person ?\",\n\t\t\t\"Who, may I ask ?\",\n\t\t\t\"Someone special perhaps ?\",\n\t\t\t\"You have a particular person in mind, don't you ?\",\n\t\t\t\"Who do you think you're talking about ?\"\n\t\t]]\n\t]],\n\t[\"everybody\", 2, [\n\t\t[\"*\", [\n\t\t\t\"goto everyone\"\n\t\t]]\n\t]],\n\t[\"nobody\", 2, [\n\t\t[\"*\", [\n\t\t\t\"goto everyone\"\n\t\t]]\n\t]],\n\t[\"noone\", 2, [\n\t\t[\"*\", [\n\t\t\t\"goto everyone\"\n\t\t]]\n\t]],\n\t[\"always\", 1, [\n\t\t[\"*\", [\n\t\t\t\"Can you think of a specific example ?\",\n\t\t\t\"When ?\",\n\t\t\t\"What incident are you thinking of ?\",\n\t\t\t\"Really, always ?\"\n\t\t]]\n\t]],\n\t[\"alike\", 10, [\n\t\t[\"*\", [\n\t\t\t\"In what way ?\",\n\t\t\t\"What resemblence do you see ?\",\n\t\t\t\"What does that similarity suggest to you ?\",\n\t\t\t\"What other connections do you see ?\",\n\t\t\t\"What do you suppose that resemblence means ?\",\n\t\t\t\"What is the connection, do you suppose ?\",\n\t\t\t\"Could there really be some connection ?\",\n\t\t\t\"How ?\"\n\t\t]]\n\t]],\n\t[\"like\", 10, [\n\t\t[\"* @be *like *\", [\n\t\t\t\"goto alike\"\n\t\t]]\n\t]],\n\t[\"different\", 0, [\n\t\t[\"*\", [\n\t\t\t\"How is it different ?\",\n\t\t\t\"What differences do you see ?\",\n\t\t\t\"What does that difference suggest to you ?\",\n\t\t\t\"What other distinctions do you see ?\",\n\t\t\t\"What do you suppose that disparity means ?\",\n\t\t\t\"Could there be some connection, do you suppose ?\",\n\t\t\t\"How ?\"\n\t\t]]\n\t]]\n\n];\n\n// regexp/replacement pairs to be performed as final cleanings\n// here: cleanings for multiple bots talking to each other\nexports.elizaPostTransforms = [\n\t/ old old/g, \" old\",\n\t/\\bthey were( not)? me\\b/g, \"it was$1 me\",\n\t/\\bthey are( not)? me\\b/g, \"it is$1 me\",\n\t/Are they( always)? me\\b/, \"it is$1 me\",\n\t/\\bthat your( own)? (\\w+)( now)? \\?/, \"that you have your$1 $2 ?\",\n\t/\\bI to have (\\w+)/, \"I have $1\",\n\t/Earlier you said your( own)? (\\w+)( now)?\\./, \"Earlier you talked about your $2.\"\n];\n\n// eof","/*\n  elizabot.js v.1.1 - ELIZA JS library (N.Landsteiner 2005)\n  Eliza is a mock Rogerian psychotherapist.\n  Original program by Joseph Weizenbaum in MAD-SLIP for \"Project MAC\" at MIT.\n  cf: Weizenbaum, Joseph \"ELIZA - A Computer Program For the Study of Natural Language\n      Communication Between Man and Machine\"\n      in: Communications of the ACM; Volume 9 , Issue 1 (January 1966): p 36-45.\n  JavaScript implementation by Norbert Landsteiner 2005; <http://www.masserk.at>\n\n  synopsis:\n\n         new ElizaBot( <random-choice-disable-flag> )\n         ElizaBot.prototype.transform( <inputstring> )\n         ElizaBot.prototype.getInitial()\n         ElizaBot.prototype.getFinal()\n         ElizaBot.prototype.reset()\n\n  usage: var eliza = new ElizaBot();\n         var initial = eliza.getInitial();\n         var reply = eliza.transform(inputstring);\n         if (eliza.quit) {\n             // last user input was a quit phrase\n         }\n\n         // method `transform()' returns a final phrase in case of a quit phrase\n         // but you can also get a final phrase with:\n         var final = eliza.getFinal();\n\n         // other methods: reset memory and internal state\n         eliza.reset();\n\n         // to set the internal memory size override property `memSize':\n         eliza.memSize = 100; // (default: 20)\n\n         // to reproduce the example conversation given by J. Weizenbaum\n         // initialize with the optional random-choice-disable flag\n         var originalEliza = new ElizaBot(true);\n\n  `ElizaBot' is also a general chatbot engine that can be supplied with any rule set.\n  (for required data structures cf. \"elizadata.js\" and/or see the documentation.)\n  data is parsed and transformed for internal use at the creation time of the\n  first instance of the `ElizaBot' constructor.\n\n  vers 1.1: lambda functions in RegExps are currently a problem with too many browsers.\n            changed code to work around.\n*/\n\n\"use strict\";\n\nvar elizaData = require('./elizadata');\n\nfunction ElizaBot(noRandomFlag) {\n\tthis.noRandom= (noRandomFlag)? true:false;\n\tthis.capitalizeFirstLetter=true;\n\tthis.debug=false;\n\tthis.memSize=20;\n\tthis.version=\"1.1 (original)\";\n\tif (!this._dataParsed) this._init();\n\tthis.reset();\n}\n\nElizaBot.prototype.reset = function() {\n\tthis.quit=false;\n\tthis.mem=[];\n\tthis.lastchoice=[];\n\tfor (var k=0; k<elizaData.elizaKeywords.length; k++) {\n\t\tthis.lastchoice[k]=[];\n\t\tvar rules=elizaData.elizaKeywords[k][2];\n\t\tfor (var i=0; i<rules.length; i++) this.lastchoice[k][i]=-1;\n\t}\n}\n\nElizaBot.prototype._dataParsed = false;\n\nElizaBot.prototype._init = function() {\n\t// parse data and convert it from canonical form to internal use\n\t// produce synonym list\n\tvar synPatterns={};\n\tif ((elizaData.elizaSynons) && (typeof elizaData.elizaSynons == 'object')) {\n\t\tfor (var i in elizaData.elizaSynons) synPatterns[i]='('+i+'|'+elizaData.elizaSynons[i].join('|')+')';\n\t}\n\t// check for keywords or install empty structure to prevent any errors\n\tif ((!elizaData.elizaKeywords) || (typeof elizaData.elizaKeywords.length == 'undefined')) {\n\t\telizaData.elizaKeywords=[['###',0,[['###',[]]]]];\n\t}\n\t// 1st convert rules to regexps\n\t// expand synonyms and insert asterisk expressions for backtracking\n\tvar sre=/@(\\S+)/;\n\tvar are=/(\\S)\\s*\\*\\s*(\\S)/;\n\tvar are1=/^\\s*\\*\\s*(\\S)/;\n\tvar are2=/(\\S)\\s*\\*\\s*$/;\n\tvar are3=/^\\s*\\*\\s*$/;\n\tvar wsre=/\\s+/g;\n\tfor (var k=0; k<elizaData.elizaKeywords.length; k++) {\n\t\tvar rules=elizaData.elizaKeywords[k][2];\n\t\telizaData.elizaKeywords[k][3]=k; // save original index for sorting\n\t\tfor (var i=0; i<rules.length; i++) {\n\t\t\tvar r=rules[i];\n\t\t\t// check mem flag and store it as decomp's element 2\n\t\t\tif (r[0].charAt(0)=='$') {\n\t\t\t\tvar ofs=1;\n\t\t\t\twhile (r[0].charAt[ofs]==' ') ofs++;\n\t\t\t\tr[0]=r[0].substring(ofs);\n\t\t\t\tr[2]=true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tr[2]=false;\n\t\t\t}\n\t\t\t// expand synonyms (v.1.1: work around lambda function)\n\t\t\tvar m=sre.exec(r[0]);\n\t\t\twhile (m) {\n\t\t\t\tvar sp=(synPatterns[m[1]])? synPatterns[m[1]]:m[1];\n\t\t\t\tr[0]=r[0].substring(0,m.index)+sp+r[0].substring(m.index+m[0].length);\n\t\t\t\tm=sre.exec(r[0]);\n\t\t\t}\n\t\t\t// expand asterisk expressions (v.1.1: work around lambda function)\n\t\t\tif (are3.test(r[0])) {\n\t\t\t\tr[0]='\\\\s*(.*)\\\\s*';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tm=are.exec(r[0]);\n\t\t\t\tif (m) {\n\t\t\t\t\tvar lp='';\n\t\t\t\t\tvar rp=r[0];\n\t\t\t\t\twhile (m) {\n\t\t\t\t\t\tlp+=rp.substring(0,m.index+1);\n\t\t\t\t\t\tif (m[1]!=')') lp+='\\\\b';\n\t\t\t\t\t\tlp+='\\\\s*(.*)\\\\s*';\n\t\t\t\t\t\tif ((m[2]!='(') && (m[2]!='\\\\')) lp+='\\\\b';\n\t\t\t\t\t\tlp+=m[2];\n\t\t\t\t\t\trp=rp.substring(m.index+m[0].length);\n\t\t\t\t\t\tm=are.exec(rp);\n\t\t\t\t\t}\n\t\t\t\t\tr[0]=lp+rp;\n\t\t\t\t}\n\t\t\t\tm=are1.exec(r[0]);\n\t\t\t\tif (m) {\n\t\t\t\t\tvar lp='\\\\s*(.*)\\\\s*';\n\t\t\t\t\tif ((m[1]!=')') && (m[1]!='\\\\')) lp+='\\\\b';\n\t\t\t\t\tr[0]=lp+r[0].substring(m.index-1+m[0].length);\n\t\t\t\t}\n\t\t\t\tm=are2.exec(r[0]);\n\t\t\t\tif (m) {\n\t\t\t\t\tvar lp=r[0].substring(0,m.index+1);\n\t\t\t\t\tif (m[1]!='(') lp+='\\\\b';\n\t\t\t\t\tr[0]=lp+'\\\\s*(.*)\\\\s*';\n\t\t\t\t}\n\t\t\t}\n\t\t\t// expand white space\n\t\t\tr[0]=r[0].replace(wsre, '\\\\s+');\n\t\t\twsre.lastIndex=0;\n\t\t}\n\t}\n\t// now sort keywords by rank (highest first)\n\telizaData.elizaKeywords.sort(this._sortKeywords);\n\t// and compose regexps and refs for pres and posts\n\tElizaBot.prototype.pres={};\n\tElizaBot.prototype.posts={};\n\tif ((elizaData.elizaPres) && (elizaData.elizaPres.length)) {\n\t\tvar a=new Array();\n\t\tfor (var i=0; i<elizaData.elizaPres.length; i+=2) {\n\t\t\ta.push(elizaData.elizaPres[i]);\n\t\t\tElizaBot.prototype.pres[elizaData.elizaPres[i]]=elizaData.elizaPres[i+1];\n\t\t}\n\t\tElizaBot.prototype.preExp = new RegExp('\\\\b('+a.join('|')+')\\\\b');\n\t}\n\telse {\n\t\t// default (should not match)\n\t\tElizaBot.prototype.preExp = /####/;\n\t\tElizaBot.prototype.pres['####']='####';\n\t}\n\tif ((elizaData.elizaPosts) && (elizaData.elizaPosts.length)) {\n\t\tvar a=new Array();\n\t\tfor (var i=0; i<elizaData.elizaPosts.length; i+=2) {\n\t\t\ta.push(elizaData.elizaPosts[i]);\n\t\t\tElizaBot.prototype.posts[elizaData.elizaPosts[i]]=elizaData.elizaPosts[i+1];\n\t\t}\n\t\tElizaBot.prototype.postExp = new RegExp('\\\\b('+a.join('|')+')\\\\b');\n\t}\n\telse {\n\t\t// default (should not match)\n\t\tElizaBot.prototype.postExp = /####/;\n\t\tElizaBot.prototype.posts['####']='####';\n\t}\n\t// check for elizaQuits and install default if missing\n\tif ((!elizaData.elizaQuits) || (typeof elizaData.elizaQuits.length == 'undefined')) {\n\t\telizaData.elizaQuits=[];\n\t}\n\t// done\n\tElizaBot.prototype._dataParsed=true;\n}\n\nElizaBot.prototype._sortKeywords = function(a,b) {\n\t// sort by rank\n\tif (a[1]>b[1]) return -1\n\telse if (a[1]<b[1]) return 1\n\t// or original index\n\telse if (a[3]>b[3]) return 1\n\telse if (a[3]<b[3]) return -1\n\telse return 0;\n}\n\nElizaBot.prototype.transform = function(text) {\n\tvar rpl='';\n\tthis.quit=false;\n\t// unify text string\n\ttext=text.toLowerCase();\n\ttext=text.replace(/@#\\$%\\^&\\*\\(\\)_\\+=~`\\{\\[\\}\\]\\|:;<>\\/\\\\\\t/g, ' ');\n\ttext=text.replace(/\\s+-+\\s+/g, '.');\n\ttext=text.replace(/\\s*[,\\.\\?!;]+\\s*/g, '.');\n\ttext=text.replace(/\\s*\\bbut\\b\\s*/g, '.');\n\ttext=text.replace(/\\s{2,}/g, ' ');\n\t// split text in part sentences and loop through them\n\tvar parts=text.split('.');\n\tfor (var i=0; i<parts.length; i++) {\n\t\tvar part=parts[i];\n\t\tif (part!='') {\n\t\t\t// check for quit expression\n\t\t\tfor (var q=0; q<elizaData.elizaQuits.length; q++) {\n\t\t\t\tif (elizaData.elizaQuits[q]==part) {\n\t\t\t\t\tthis.quit=true;\n\t\t\t\t\treturn this.getFinal();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// preprocess (v.1.1: work around lambda function)\n\t\t\tvar m=this.preExp.exec(part);\n\t\t\tif (m) {\n\t\t\t\tvar lp='';\n\t\t\t\tvar rp=part;\n\t\t\t\twhile (m) {\n\t\t\t\t\tlp+=rp.substring(0,m.index)+this.pres[m[1]];\n\t\t\t\t\trp=rp.substring(m.index+m[0].length);\n\t\t\t\t\tm=this.preExp.exec(rp);\n\t\t\t\t}\n\t\t\t\tpart=lp+rp;\n\t\t\t}\n\t\t\tthis.sentence=part;\n\t\t\t// loop trough keywords\n\t\t\tfor (var k=0; k<elizaData.elizaKeywords.length; k++) {\n\t\t\t\tif (part.search(new RegExp('\\\\b'+elizaData.elizaKeywords[k][0]+'\\\\b', 'i'))>=0) {\n\t\t\t\t\trpl = this._execRule(k);\n\t\t\t\t}\n\t\t\t\tif (rpl!='') return rpl;\n\t\t\t}\n\t\t}\n\t}\n\t// nothing matched try mem\n\trpl=this._memGet();\n\t// if nothing in mem, so try xnone\n\tif (rpl=='') {\n\t\tthis.sentence=' ';\n\t\tvar k=this._getRuleIndexByKey('xnone');\n\t\tif (k>=0) rpl=this._execRule(k);\n\t}\n\t// return reply or default string\n\treturn (rpl!='')? rpl : 'I am at a loss for words.';\n}\n\nElizaBot.prototype._execRule = function(k) {\n\tvar rule=elizaData.elizaKeywords[k];\n\tvar decomps=rule[2];\n\tvar paramre=/\\(([0-9]+)\\)/;\n\tfor (var i=0; i<decomps.length; i++) {\n\t\tvar m=this.sentence.match(decomps[i][0]);\n\t\tif (m!=null) {\n\t\t\tvar reasmbs=decomps[i][1];\n\t\t\tvar memflag=decomps[i][2];\n\t\t\tvar ri= (this.noRandom)? 0 : Math.floor(Math.random()*reasmbs.length);\n\t\t\tif (((this.noRandom) && (this.lastchoice[k][i]>ri)) || (this.lastchoice[k][i]==ri)) {\n\t\t\t\tri= ++this.lastchoice[k][i];\n\t\t\t\tif (ri>=reasmbs.length) {\n\t\t\t\t\tri=0;\n\t\t\t\t\tthis.lastchoice[k][i]=-1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.lastchoice[k][i]=ri;\n\t\t\t}\n\t\t\tvar rpl=reasmbs[ri];\n\t\t\tif (this.debug) alert('match:\\nkey: '+elizaData.elizaKeywords[k][0]+\n\t\t\t\t'\\nrank: '+elizaData.elizaKeywords[k][1]+\n\t\t\t\t'\\ndecomp: '+decomps[i][0]+\n\t\t\t\t'\\nreasmb: '+rpl+\n\t\t\t\t'\\nmemflag: '+memflag);\n\t\t\tif (rpl.search('^goto ', 'i')==0) {\n\t\t\t\tvar ki=this._getRuleIndexByKey(rpl.substring(5));\n\t\t\t\tif (ki>=0) return this._execRule(ki);\n\t\t\t}\n\t\t\t// substitute positional params (v.1.1: work around lambda function)\n\t\t\tvar m1=paramre.exec(rpl);\n\t\t\tif (m1) {\n\t\t\t\tvar lp='';\n\t\t\t\tvar rp=rpl;\n\t\t\t\twhile (m1) {\n\t\t\t\t\tvar param = m[parseInt(m1[1])];\n\t\t\t\t\t// postprocess param\n\t\t\t\t\tvar m2=this.postExp.exec(param);\n\t\t\t\t\tif (m2) {\n\t\t\t\t\t\tvar lp2='';\n\t\t\t\t\t\tvar rp2=param;\n\t\t\t\t\t\twhile (m2) {\n\t\t\t\t\t\t\tlp2+=rp2.substring(0,m2.index)+this.posts[m2[1]];\n\t\t\t\t\t\t\trp2=rp2.substring(m2.index+m2[0].length);\n\t\t\t\t\t\t\tm2=this.postExp.exec(rp2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tparam=lp2+rp2;\n\t\t\t\t\t}\n\t\t\t\t\tlp+=rp.substring(0,m1.index)+param;\n\t\t\t\t\trp=rp.substring(m1.index+m1[0].length);\n\t\t\t\t\tm1=paramre.exec(rp);\n\t\t\t\t}\n\t\t\t\trpl=lp+rp;\n\t\t\t}\n\t\t\trpl=this._postTransform(rpl);\n\t\t\tif (memflag) this._memSave(rpl);\n\t\t\telse return rpl;\n\t\t}\n\t}\n\treturn '';\n}\n\nElizaBot.prototype._postTransform = function(s) {\n\t// final cleanings\n\ts=s.replace(/\\s{2,}/g, ' ');\n\ts=s.replace(/\\s+\\./g, '.');\n\tif ((elizaData.elizaPostTransforms) && (elizaData.elizaPostTransforms.length)) {\n\t\tfor (var i=0; i<elizaData.elizaPostTransforms.length; i+=2) {\n\t\t\ts=s.replace(elizaData.elizaPostTransforms[i], elizaData.elizaPostTransforms[i+1]);\n\t\t\telizaData.elizaPostTransforms[i].lastIndex=0;\n\t\t}\n\t}\n\t// capitalize first char (v.1.1: work around lambda function)\n\tif (this.capitalizeFirstLetter) {\n\t\tvar re=/^([a-z])/;\n\t\tvar m=re.exec(s);\n\t\tif (m) s=m[0].toUpperCase()+s.substring(1);\n\t}\n\treturn s;\n}\n\nElizaBot.prototype._getRuleIndexByKey = function(key) {\n\tfor (var k=0; k<elizaData.elizaKeywords.length; k++) {\n\t\tif (elizaData.elizaKeywords[k][0]==key) return k;\n\t}\n\treturn -1;\n}\n\nElizaBot.prototype._memSave = function(t) {\n\tthis.mem.push(t);\n\tif (this.mem.length>this.memSize) this.mem.shift();\n}\n\nElizaBot.prototype._memGet = function() {\n\tif (this.mem.length) {\n\t\tif (this.noRandom) return this.mem.shift();\n\t\telse {\n\t\t\tvar n=Math.floor(Math.random()*this.mem.length);\n\t\t\tvar rpl=this.mem[n];\n\t\t\tfor (var i=n+1; i<this.mem.length; i++) this.mem[i-1]=this.mem[i];\n\t\t\tthis.mem.length--;\n\t\t\treturn rpl;\n\t\t}\n\t}\n\telse return '';\n}\n\nElizaBot.prototype.getFinal = function() {\n\tif (!elizaData.elizaFinals) return '';\n\treturn elizaData.elizaFinals[Math.floor(Math.random()*elizaData.elizaFinals.length)];\n}\n\nElizaBot.prototype.getInitial = function() {\n\tif (!elizaData.elizaInitials) return '';\n\treturn elizaData.elizaInitials[Math.floor(Math.random()*elizaData.elizaInitials.length)];\n}\n\n\n// fix array.prototype methods (push, shift) if not implemented (MSIE fix)\nif (typeof Array.prototype.push == 'undefined') {\n\tArray.prototype.push=function(v) { return this[this.length]=v; };\n}\nif (typeof Array.prototype.shift == 'undefined') {\n\tArray.prototype.shift=function() {\n\t\tif (this.length==0) return null;\n\t\tvar e0=this[0];\n\t\tfor (var i=1; i<this.length; i++) this[i-1]=this[i];\n\t\tthis.length--;\n\t\treturn e0;\n\t};\n}\n\nmodule.exports = ElizaBot;\n\n// eof","<script>\r\n  import Eliza from \"elizabot\";\r\n  import { beforeUpdate, afterUpdate } from \"svelte\";\r\n\r\n  let div;\r\n  let autoscroll;\r\n\r\n  beforeUpdate(() => {\r\n    autoscroll =\r\n      div && div.offsetHeight + div.scrollTop > div.scrollHeight - 20;\r\n  });\r\n\r\n  afterUpdate(() => {\r\n    if (autoscroll) div.scrollTo(0, div.scrollHeight);\r\n  });\r\n\r\n  const eliza = new Eliza();\r\n\r\n  let comments = [{ author: \"eliza\", text: eliza.getInitial() }];\r\n\r\n  function handleKeydown(event) {\r\n    if (event.key === \"Enter\") {\r\n      const text = event.target.value;\r\n      if (!text) return;\r\n\r\n      comments = comments.concat({\r\n        author: \"user\",\r\n        text,\r\n      });\r\n\r\n      event.target.value = \"\";\r\n\r\n      const reply = eliza.transform(text);\r\n      setTimeout(() => {\r\n        comments = comments.concat({\r\n          author: \"eliza\",\r\n          text: \"...\",\r\n          placeholder: true,\r\n        });\r\n        setTimeout(() => {\r\n          comments = comments\r\n            .filter(comment => !comment.placeholder)\r\n            .concat({\r\n              author: \"eliza\",\r\n              text: reply,\r\n            });\r\n        }, 500 + Math.random() * 500);\r\n      }, 200 + Math.random() * 200);\r\n    }\r\n  }\r\n</script>\r\n\r\n<div class=\"chat\">\r\n  <h1>Элизабет</h1>\r\n  <div class=\"scrollable\" bind:this={div}>\r\n    {#each comments as comment}\r\n      <article class={comment.author}>\r\n        <span>{comment.text}</span>\r\n      </article>\r\n    {/each}\r\n  </div>\r\n  <input on:keydown={handleKeydown} />\r\n</div>\r\n\r\n<style>\r\n  .chat {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n    max-width: 320px;\r\n  }\r\n\r\n  .scrollable {\r\n    flex: 1 1 auto;\r\n    border-top: 1px solid #eee;\r\n    margin: 0 0 0.5em 0;\r\n    overflow-y: auto;\r\n  }\r\n\r\n  article {\r\n    margin: 0.5em 0;\r\n  }\r\n\r\n  .user {\r\n    text-align: right;\r\n  }\r\n\r\n  span {\r\n    padding: 0.5em 1em;\r\n    display: inline-block;\r\n  }\r\n\r\n  .eliza span {\r\n    background-color: rgb(191, 238, 248);\r\n    border-radius: 1em 1em 1em 0;\r\n  }\r\n\r\n  .user span {\r\n    background-color: #0074d9;\r\n    color: white;\r\n    border-radius: 1em 1em 0 1em;\r\n  }\r\n</style>\r\n","<script>\r\n\texport let hereKitty = false;\r\n</script>\r\n\r\n<img\r\n\tclass:curious={hereKitty}\r\n\talt=\"Kitten\"\r\n\tsrc=\"https://svelte.dev/tutorial/kitten.png\"\r\n>\r\n\r\n<style>\r\n\timg {\r\n\t\tposition: absolute;\r\n\t\tleft: 0;\r\n\t\tbottom: -60px;\r\n\t\ttransform: translate(-80%, 0) rotate(-30deg);\r\n\t\ttransform-origin: 100% 100%;\r\n\t\ttransition: transform 0.4s;\r\n\t}\r\n\r\n\t.curious {\r\n\t\ttransform: translate(-15%, 0) rotate(0deg);\r\n\t}\r\n\r\n\t:global(body) {\r\n\t\toverflow: hidden;\r\n\t}\r\n</style>","<!-- svelte-ignore a11y-missing-attribute -->\r\n<iframe src=\"https://www.webtran.ru/translate/english/to-russian/\" width=\"468\" seamless align=\"left\"  >\r\n    Ваш браузер не поддерживает плавающие фреймы!\r\n </iframe>\r\n\r\n<style>\r\n    iframe{\r\n        border-width:0.1;\r\n        background-color: aliceblue;\r\n        border-radius: 1em;\r\n        box-sizing: border-box;\r\n        border-color: rgba(0, 0, 0, 0.1);\r\n    }\r\n</style>","<script>\n  import Elizabet from \"./Elizabet.svelte\";\n  import Cat from \"./Cat.svelte\";\n  import Browser from \"./Browser.svelte\";\n  let hereKitty = false;\n\n  const handleMouseenter = () => (hereKitty = true);\n  const handleMouseleave = () => (hereKitty = false);\n</script>\n\n<svelte:body\n  on:mouseenter={handleMouseenter}\n  on:mouseleave={handleMouseleave} />\n\n<Cat {hereKitty} />\n<div class=\"body\">\n  <div\n    class=\"eliz\"\n    on:mouseenter={handleMouseleave}\n    on:mouseleave={handleMouseenter}\n  >\n    <Elizabet />\n  </div>\n  <Browser />\n</div>\n\n<style>\n  .body {\n    display: flex;\n    margin-top: 5%;\n  }\n  .eliz {\n    background-color: azure;\n    width: 320px;\n    height: 70vh;\n    padding: 20px;\n    margin: auto;\n    border-radius: 1em;\n  }\n</style>\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","src_url_equal","element_src","url","document","createElement","href","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","toggle_class","toggle","classList","set_current_component","component","get_current_component","Error","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","length","update","$$","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","transition_in","block","local","delete","transition_out","o","outros","c","d","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","be","belief","cannot","desire","everyone","family","happy","sad","ElizaBot","noRandomFlag","noRandom","capitalizeFirstLetter","debug","memSize","version","_dataParsed","_init","reset","prototype","quit","mem","lastchoice","k","elizaData","elizaKeywords","rules","synPatterns","elizaSynons","join","sre","are","are1","are2","are3","wsre","r","charAt","ofs","substring","exec","sp","test","lp","rp","replace","lastIndex","sort","_sortKeywords","pres","posts","elizaPres","preExp","RegExp","elizaPosts","postExp","elizaQuits","transform","rpl","parts","toLowerCase","split","part","q","getFinal","sentence","search","_execRule","_memGet","_getRuleIndexByKey","decomps","paramre","match","reasmbs","memflag","ri","Math","floor","random","alert","ki","m1","param","parseInt","m2","lp2","rp2","_postTransform","_memSave","s","elizaPostTransforms","toUpperCase","key","t","shift","n","elizaFinals","getInitial","elizaInitials","v","e0","elizabot","t0_value","article","article_class_value","author","span","wholeText","set_data","t0","div1","h1","div0","input","iterations","div","autoscroll","offsetHeight","scrollTop","scrollHeight","afterUpdate","scrollTo","eliza","Eliza","comments","concat","reply","setTimeout","placeholder","$$invalidate","comment","$$value","img","hereKitty","iframe","body"],"mappings":"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AED,CAAC,cAAe,CACf,yBACA,sBACA,kCACA,4BAED,CAAC,aAAc,CACd,oCACA,0BACA,6BACA,0CAED,CAAC,cAAe,CACf,+CACA,0BACA,8BACA,6BAED,CAAC,IAAK,CACL,gBACA,8BACA,2CACA,gCAGF,CAAC,MAAO,EAAG,CACV,CAAC,uBAAwB,CACxB,eAED,CAAC,cAAe,CACf,kCACA,2CACA,uCACA,sCAED,CAAC,cAAe,CACf,+BACA,6CACA,mCACA,sBACA,qCACA,kDACA,0CAED,CAAC,UAAW,CACX,oCACA,cACA,kDACA,mCAGF,CAAC,MAAO,EAAG,CACV,CAAC,IAAK,CACL,iCACA,gBACA,SACA,oBAGF,CAAC,KAAM,EAAG,CACT,CAAC,aAAc,CACd,6BACA,uBACA,mCACA,8CACA,mBACA,oDACA,6CAED,CAAC,IAAK,CACL,yCACA,gCACA,YACA,iBAGF,CAAC,KAAM,EAAG,CACT,CAAC,WAAY,CACZ,8DACA,qCACA,6BACA,kBAED,CAAC,kBAAmB,CACnB,kCACA,gCACA,aACA,8DAED,CAAC,SAAU,CACV,aACA,4BACA,yDACA,6CAGF,CAAC,MAAO,EAAG,CACV,CAAC,cAAe,CACf,oCACA,YACA,iCACA,uDAED,CAAC,YAAa,CACb,6DACA,kCACA,iCACA,gBAGF,CAAC,OAAQ,EAAG,CACX,CAAC,IAAK,CACL,mBACA,oCACA,uCACA,yCACA,sCACA,sBACA,yCACA,yCACA,mCAGF,CAAC,MAAO,EAAG,CACV,CAAC,QAAS,CACT,gBAGF,CAAC,OAAQ,EAAG,CACX,CAAC,SAAU,CACV,gBAGF,CAAC,QAAS,EAAG,CACZ,CAAC,UAAW,CACX,gBAGF,CAAC,MAAO,EAAG,CACV,CAAC,QAAS,CACT,gBAGF,CAAC,UAAW,EAAG,CACd,CAAC,IAAK,CACL,4BACA,yCACA,mDACA,0CAGF,CAAC,MAAO,EAAG,CACV,CAAC,oBAAqB,CACrB,+BACA,mCACA,4BACA,uBACA,cAED,CAAC,kBAAmB,CACnB,2CACA,kCACA,6CACA,wCACA,cAED,CAAC,IAAK,CACL,gBAGF,CAAC,WAA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"}